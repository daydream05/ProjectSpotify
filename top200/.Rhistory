full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
#Grab the surname from passenger name
full$Surname <- sapply(full$Name,
function(x)
strsplit(x, split = '[,.]')[[1]][1])
# Create a family size variable including the passenger
full$Fsize <- full$SibSp + full$Parch + 1
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
#USe ggplot2 to visulaize the relationship between family & survival
#We only process 891 rows because thats our training data.
ggplot(data = full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat = "count", position = "dodge") +
scale_x_continuous(breaks = c(1:11)) +
labs(x = 'Family Size') +
theme_few()
#Let's fix the variable datatype first
full$Age <- as.numeric(full$Age)
full$Fare <- as.double(unlist(full$Fare))
#Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
#  Show family size by survival using a mosaic plot
# Mosaic plot is good for examining relationship between categorical variables
table(full$FsizeD, full$Survived) %>%
mosaicplot(main = 'Family Size by Survival',
shade = TRUE)
# This variable appears to have missing values
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
# The last [1] means that we are picking the first split from our string.
#
full$Deck <- factor(full$Cabin %>%
sapply(function(x) strsplit(x, NULL)[[1]][1]))
#This shows which rows have Na on the column Embarked.
full[is.na(full$Embarked),]
# Get rid of the passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# USe ggplot2 to visualize eembarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
#We us the hline to show which category our 80 falls perfectly
geom_hline(aes(yintercept=80),
color='red',
linetype='dashed',
lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
#Let's replace the na values with 'C'
full$Embarked[is.na(full$Embarked)]
#Check if we are correct
full$Embarked[c(62, 830)]
full[is.na(full$Fare),]
#Let's pick only all the rows that are third class and embarked on S
s3_table <- full %>% filter(Pclass == '3' & Embarked == 'S' & !is.na(Fare))
s3_fare_median <- s3_table %>%
summarise(
median_fare = median(as.numeric(Fare), na.rm = TRUE)
)
ggplot(data = s3_table,
aes(x = as.numeric(Fare)),
color='red') +
geom_density(fill='#99d6ff', alpha = 0.4) +
geom_vline(aes(xintercept=s3_fare_median),
linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
#Row number of our na value
full$Fare[1044] <- s3_fare_median
sum(is.na(full$Age))
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
useful_table <- full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')]
useful_table$Fare <- as.double(unlist(useful_table$Fare))
names(useful_table)
library(mice)
mice_mod <- mice(useful_table, method='rf')
mice_output <- complete(mice_mod)
par(mfrow=c(1,2))
hist(full$Age,
freq=F,
main='Age: Original Data',
col='darkgreen'
#ylim=c(0, .4)
)
hist(mice_output$Age,
freq=F,
main='Age: MICE Output',
col='lightgreen'
#ylim=c(0, 0.4)
)
#replace the age variable on the full from the mice model
full$Age <- mice_output$Age
#First we look at the relationship between age & survival
ggplot(full[1:891,], aes(x = Age, fill = factor(Survived))) +
geom_histogram() +
facet_grid(.~Sex) +
theme_few()
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# show counts
table(full$Child, full$Survived)
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# show counts
table(full$Child, full$Survived)
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
View(full)
full$Mother <- as.factor(full$Mother)
full$Child <- as.factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <-  full[892:1309, ]
#Load Packages
library(readr)
library(ggplot2)
library(ggthemes)
library(scales)
library(dplyr)
library(randomForest)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
full <- bind_rows(train, test)
str(full)
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
#Grab the surname from passenger name
full$Surname <- sapply(full$Name,
function(x)
strsplit(x, split = '[,.]')[[1]][1])
# Create a family size variable including the passenger
full$Fsize <- full$SibSp + full$Parch + 1
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
#USe ggplot2 to visulaize the relationship between family & survival
#We only process 891 rows because thats our training data.
ggplot(data = full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat = "count", position = "dodge") +
scale_x_continuous(breaks = c(1:11)) +
labs(x = 'Family Size') +
theme_few()
#Let's fix the variable datatype first
full$Age <- as.double(full$Age)
full$Fare <- as.numeric(full$Fare)
#Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
#  Show family size by survival using a mosaic plot
# Mosaic plot is good for examining relationship between categorical variables
table(full$FsizeD, full$Survived) %>%
mosaicplot(main = 'Family Size by Survival',
shade = TRUE)
# This variable appears to have missing values
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
# The last [1] means that we are picking the first split from our string.
#
full$Deck <- factor(full$Cabin %>%
sapply(function(x) strsplit(x, NULL)[[1]][1]))
#This shows which rows have Na on the column Embarked.
full[is.na(full$Embarked),]
# Get rid of the passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# USe ggplot2 to visualize eembarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
#We us the hline to show which category our 80 falls perfectly
geom_hline(aes(yintercept=80),
color='red',
linetype='dashed',
lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
#Let's replace the na values with 'C'
#Check if we are correct
full[is.na(full$Embarked),] <- 'C'
full$Embarked[c(62, 830)]
full[is.na(full$Fare),]
#Let's pick only all the rows that are third class and embarked on S
s3_table <- full %>% filter(Pclass == '3' & Embarked == 'S' & !is.na(Fare))
s3_fare_median <- s3_table %>%
summarise(
median_fare = median(as.numeric(Fare), na.rm = TRUE)
)
ggplot(data = s3_table,
aes(x = as.numeric(Fare)),
color='red') +
geom_density(fill='#99d6ff', alpha = 0.4) +
geom_vline(aes(xintercept=s3_fare_median),
linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
#Row number of our na value
full$Fare[1044] <- s3_fare_median
sum(is.na(full$Age))
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
useful_table <- full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')]
names(useful_table)
library(mice)
mice_mod <- mice(useful_table, method='rf')
full$Fare <- as.double(unlist(full$Fare))
mice_mod <- mice(useful_table, method='rf')
View(full)
View(full)
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
useful_table <- full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')]
names(useful_table)
library(mice)
full$Fare <- as.double(unlist(full$Fare))
mice_mod <- mice(useful_table, method='rf')
mice_output <-  complete(mice_mod)
mice_output <-  complete(mice_mod)
# Plot age distributions
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
View(full)
#Load Packages
library(readr)
library(ggplot2)
library(ggthemes)
library(scales)
library(dplyr)
library(randomForest)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
full <- bind_rows(train, test)
full$Fare <- as.double(unlist(full$Fare))
full$Age <- as.numeric(full$Age)
str(full)
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
#Grab the surname from passenger name
full$Surname <- sapply(full$Name,
function(x)
strsplit(x, split = '[,.]')[[1]][1])
# Create a family size variable including the passenger
full$Fsize <- full$SibSp + full$Parch + 1
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
#USe ggplot2 to visulaize the relationship between family & survival
#We only process 891 rows because thats our training data.
ggplot(data = full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat = "count", position = "dodge") +
scale_x_continuous(breaks = c(1:11)) +
labs(x = 'Family Size') +
theme_few()
#Let's fix the variable datatype first
full$Age <- as.double(full$Age)
full$Fare <- as.numeric(full$Fare)
#Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
#  Show family size by survival using a mosaic plot
# Mosaic plot is good for examining relationship between categorical variables
table(full$FsizeD, full$Survived) %>%
mosaicplot(main = 'Family Size by Survival',
shade = TRUE)
# This variable appears to have missing values
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
# The last [1] means that we are picking the first split from our string.
#
full$Deck <- factor(full$Cabin %>%
sapply(function(x) strsplit(x, NULL)[[1]][1]))
#This shows which rows have Na on the column Embarked.
full[is.na(full$Embarked),]
# Get rid of the passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# USe ggplot2 to visualize eembarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
#We us the hline to show which category our 80 falls perfectly
geom_hline(aes(yintercept=80),
color='red',
linetype='dashed',
lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
#Let's replace the na values with 'C'
#Check if we are correct
full[is.na(full$Embarked),] <- 'C'
full$Embarked[c(62, 830)]
full[is.na(full$Fare),]
#Let's pick only all the rows that are third class and embarked on S
s3_table <- full %>% filter(Pclass == '3' & Embarked == 'S' & !is.na(Fare))
s3_fare_median <- s3_table %>%
summarise(
median_fare = median(as.numeric(Fare), na.rm = TRUE)
)
ggplot(data = s3_table,
aes(x = as.numeric(Fare)),
color='red') +
geom_density(fill='#99d6ff', alpha = 0.4) +
geom_vline(aes(xintercept=s3_fare_median),
linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
#Row number of our na value
full$Fare[1044] <- s3_fare_median
sum(is.na(full$Age))
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
useful_table <- full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')]
names(useful_table)
library(mice)
mice_mod <- mice(useful_table, method='rf')
is.atomic(full$Fare)
#Load Packages
library(readr)
library(ggplot2)
library(ggthemes)
library(scales)
library(dplyr)
library(randomForest)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
full <- bind_rows(train, test)
full$Fare <- as.double(unlist(full$Fare))
full$Age <- as.numeric(full$Age)
str(full)
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
#Grab the surname from passenger name
full$Surname <- sapply(full$Name,
function(x)
strsplit(x, split = '[,.]')[[1]][1])
# Create a family size variable including the passenger
full$Fsize <- full$SibSp + full$Parch + 1
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
#USe ggplot2 to visulaize the relationship between family & survival
#We only process 891 rows because thats our training data.
ggplot(data = full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat = "count", position = "dodge") +
scale_x_continuous(breaks = c(1:11)) +
labs(x = 'Family Size') +
theme_few()
#Let's fix the variable datatype first
full$Age <- as.double(full$Age)
full$Fare <- as.numeric(full$Fare)
#Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
#  Show family size by survival using a mosaic plot
# Mosaic plot is good for examining relationship between categorical variables
table(full$FsizeD, full$Survived) %>%
mosaicplot(main = 'Family Size by Survival',
shade = TRUE)
# This variable appears to have missing values
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
# The last [1] means that we are picking the first split from our string.
#
full$Deck <- factor(full$Cabin %>%
sapply(function(x) strsplit(x, NULL)[[1]][1]))
#This shows which rows have Na on the column Embarked.
full[is.na(full$Embarked),]
# Get rid of the passenger IDs
embark_fare <- full %>%
filter(PassengerId != 62 & PassengerId != 830)
# USe ggplot2 to visualize eembarkment, passenger class, & median fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
#We us the hline to show which category our 80 falls perfectly
geom_hline(aes(yintercept=80),
color='red',
linetype='dashed',
lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
#Let's replace the na values with 'C'
#Check if we are correct
full[is.na(full$Embarked),] <- 'C'
full$Embarked[c(62, 830)]
full[is.na(full$Fare),]
#Let's pick only all the rows that are third class and embarked on S
s3_table <- full %>% filter(Pclass == '3' & Embarked == 'S' & !is.na(Fare))
s3_fare_median <- s3_table %>%
summarise(
median_fare = median(as.numeric(Fare), na.rm = TRUE)
)
ggplot(data = s3_table,
aes(x = as.numeric(Fare)),
color='red') +
geom_density(fill='#99d6ff', alpha = 0.4) +
geom_vline(aes(xintercept=s3_fare_median),
linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) +
theme_few()
#Row number of our na value
full$Fare[1044] <- s3_fare_median
sum(is.na(full$Age))
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
useful_table <- full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')]
names(useful_table)
library(mice)
mice_mod <- mice(useful_table, method='rf')
setwd(D:/fall 2016/data warehousing/projectspotify)
setwd("D:/fall 2016/data warehousing/projectspotify/top200")
l <- as.Date("09/01/2016")
l
dates <- seq(as.Date("2015/09/01"),
as.Date("2016/09/01"),
"days")
dates <- seq(as.Date("2015/09/01"),
as.Date("2016/08/31"),
"days")
View(dates)
dates
str(dates)
dim(dates)
str(dates)
library(dplyr)
file_names <- as.character(dates)
file_names.length()
length(file_names)
url <- "https://spotifycharts.com/regional/global/daily/"
paste(url, file_names[1], "/download")
paste(url, file_names[1], "/download", sep="")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for(name in length(file_names)){}
for(name in length(file_names)){print(name)}
for(name in 1:length(file_names)){print(name)}
for(name in 1:file_names){print(name)}
file_names
for (i in seq(file_names)){
url_path <- paste(url, name, "/download", sep="")
dest_path <- paste(name, ".csv", sep="")
download.file(url_path, dest_path)
}
file_names[1]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
